// Code generated by go-bindata.
// sources:
// bash/gh-release.bash
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashGhReleaseBash = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x51\x6f\xdb\x36\x10\x7e\xb6\x7f\xc5\x81\xf3\xd2\x78\x18\x2d\xac\xdb\x93\x9d\x64\xcd\x52\x63\x0d\x56\x34\x45\xec\x6c\x05\x3c\x43\xa0\x25\xca\xe2\x2a\x91\x82\x48\x1b\x0b\x52\xff\xf7\x1e\x29\x52\x56\x1c\x3f\x18\xc8\x93\x45\xde\xdd\x77\xdf\xdd\x7d\x47\xf7\x6b\xce\x52\x25\x8b\x47\xa8\x79\x16\x73\x99\x56\x4a\x48\x73\x49\x06\x4f\x7f\xde\xce\x3f\x3c\xfc\x11\x5f\x7f\xbe\x8d\x1f\xee\x3f\x8e\x69\x6e\x4c\xa5\xc7\x51\xc4\x2a\x31\x5a\x0b\x93\x6f\x56\xa3\x44\x95\xbb\xa8\xe6\x95\xd2\xd1\x8f\x3a\xc2\x4b\x3c\x64\x3a\x32\x6c\x6d\x2f\x48\x17\xbb\xe0\x4c\xf3\xd7\xe1\x7b\x90\x63\xb8\xff\x69\x25\x2f\xdf\x3c\x11\xcc\x1c\x4b\x56\x72\x32\x06\xb2\x45\x06\x3f\x03\x09\xc7\xe6\x64\x58\xbd\xe6\x26\x46\xe0\x52\x18\xa1\x73\x6f\xd9\xbd\xe9\xf7\x3d\x16\x4d\x10\xdd\xf0\xf3\x21\x3c\xf5\x7b\x29\x4f\x0a\x56\x73\xb0\x1c\x2c\x10\xf2\xfe\x85\xc0\x96\xd7\x5a\x60\x42\x2c\xe2\xed\x0f\xdb\x1d\x81\x55\xcd\x64\x92\xdb\xf3\xaf\x63\x5a\x32\x6d\x78\x8d\xb7\x3e\xe0\x37\xd2\xef\x15\x2a\x61\x45\x60\x8b\x77\xe7\x55\x8d\x5d\xc8\x80\x0c\xba\x15\x10\x3c\x7b\x6c\xfb\xe9\x98\xe3\x6f\x83\x4e\x86\x87\x38\xf1\xa6\x2e\x8e\x62\x85\x2e\x13\x77\xd7\x30\x77\xe1\x3c\xc9\x15\x90\x1b\x5b\xa0\x90\xeb\x80\x03\xdb\x90\x15\xb2\x5a\x95\xbe\x1a\xf0\x79\x61\x34\x1a\x61\xe8\xa6\x2a\x14\x4b\x43\xca\x04\x7f\x81\x6a\xa0\xe9\x3e\x2d\xe9\x30\x40\xf3\xef\x2c\x49\xb8\xd6\xb1\x51\x5f\xb9\xbc\x1c\x84\x69\xdf\xdc\x4c\x67\xb3\x78\x7e\xf7\xd7\xf4\x13\x81\x6f\xd0\xc0\x52\xf4\xb7\xfc\x32\x55\x03\xd3\x9a\x1b\x10\x12\x06\xe7\x05\x26\xb8\x0e\x2c\x87\x13\x48\x55\xbf\xe7\x5b\xe0\x7b\x7b\xbe\x42\x8b\xfd\x86\x81\x8b\xb3\x20\xbe\xca\x07\x87\x6c\xcb\x74\x8d\xf4\x65\xf4\x1a\xe6\x5f\xe0\xf3\xdd\x6c\x0e\xf4\x03\x76\x43\x49\xc3\xa5\xa1\xf3\xc7\x8a\x8f\x31\x69\x29\x4a\x6e\xf0\xbb\x09\x1b\xba\x4c\x63\xf0\xc3\xa0\x34\x65\x86\xd1\x95\x90\xac\x7e\x04\xf2\xce\x73\x8b\x9a\xec\x04\xfe\xc5\x0c\x3d\x32\xe8\x34\xcb\x05\x9e\x9d\xd0\x8b\x2b\x88\x52\xbe\x8d\xe4\xa6\x28\x50\x77\x4a\xf2\xfe\x6e\xaf\xc9\x94\x6b\x53\xab\xc7\xd3\x44\xf9\xf6\xf5\x42\x09\x0e\x22\xed\x4e\xfb\xd9\x7c\xed\xf4\x02\x3d\x91\x52\xab\x1c\x8a\xeb\xe7\x7a\x4d\x5a\x45\x75\x64\xf7\x1e\x9d\xbb\xb2\x6b\x06\xd2\x2a\xe9\x0b\xbc\x9f\x7e\x9c\xce\xa7\xcf\xb3\x44\x83\x3d\x95\x13\x14\xf5\x22\x17\x32\x6a\xf2\xd8\x97\xe1\x65\x1b\xb2\xe3\x2d\x38\x2c\xe0\x18\x49\x0f\x78\x0a\x29\x1c\xe4\x46\xb3\xb5\x7f\x53\xbc\x3c\xed\xc5\x18\xd6\x39\x0d\x5b\xb8\xa0\xdb\x25\xe8\xcd\xca\xbe\x4d\x4c\xa6\xbe\x96\xe0\x3f\x6b\x0d\x7a\xdc\x96\x09\xd0\x3c\x56\x70\x11\xa8\x5f\xc1\x85\x27\x7e\x05\x8b\x66\x81\x97\xb0\xb0\x96\x65\x27\xca\xcb\xe9\x68\x58\x17\x3c\xe7\xc9\x57\xbd\x29\x35\x5c\xb0\x62\xad\x6a\x7c\x94\xcb\x60\xef\xaa\xb3\xf5\x7b\xae\x4f\x8c\x71\xd2\x0c\x80\xff\x20\x80\xdb\x47\x34\xb4\xd8\x90\x89\x82\xeb\x66\x46\xa7\xac\x7f\xc2\x0c\x90\xc3\xb5\xfb\xb6\x87\x23\x16\xdd\x6e\xd3\xde\xe9\xc9\x79\xed\x46\xce\xb2\xdf\xad\x92\x09\xd9\x10\xb6\x19\x29\x57\x50\x89\x8a\x67\x4c\x14\x13\x58\x2c\x10\x68\x7e\x7f\x7d\x33\x25\xb0\x5c\xc2\xd9\x19\x38\x9f\xff\x51\x0a\x76\x54\x6e\xe1\x84\xb4\x74\x5c\xff\x87\xbd\x9e\xce\x45\x66\x26\xf0\xfc\x4f\x04\x1d\xdf\x91\xc9\x04\xfd\x7c\xc7\x87\x87\x7e\x61\x12\xad\x63\xdb\xcb\x17\xae\xfb\x69\xb4\xce\x74\x8b\x99\x7d\x77\x07\x7f\x4f\xef\x67\xb7\x77\x9f\x1a\xcb\x4f\xd6\xe0\x44\x67\x8f\x5c\xb3\x04\x4b\xfe\x1e\x00\x00\xff\xff\x63\xa8\xd6\x7f\xec\x07\x00\x00")

func bashGhReleaseBashBytes() ([]byte, error) {
	return bindataRead(
		_bashGhReleaseBash,
		"bash/gh-release.bash",
	)
}

func bashGhReleaseBash() (*asset, error) {
	bytes, err := bashGhReleaseBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bash/gh-release.bash", size: 2028, mode: os.FileMode(493), modTime: time.Unix(1447936975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bash/gh-release.bash": bashGhReleaseBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bash": &bintree{nil, map[string]*bintree{
		"gh-release.bash": &bintree{bashGhReleaseBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

